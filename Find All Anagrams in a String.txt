438. Find All Anagrams in a String
Medium
10.5K
301
Companies
Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input: s = "abab", p = "ab"
Output: [0,1,2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
 

Constraints:

1 <= s.length, p.length <= 3 * 104
s and p consist of lowercase English letters.

class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> res;
        if (s.empty() || s.size() < p.size()) return res;
        unordered_map<char, int> m;
        for (char c : p) m[c]++;
        int left = 0, right = 0, count = m.size();
        while (right < s.size()) {
            if (m.count(s[right])) {
                m[s[right]]--;
                if (m[s[right]] == 0) count--;
            }
            right++;
            while (count == 0) {
                if (right - left == p.size()) res.push_back(left);
                if (m.count(s[left])) {
                    m[s[left]]++;
                    if (m[s[left]] > 0) count++;
                }
                left++;
            }
        }
        return res;
    }
};
